--- # YAML belgesi başlangıcı
name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Manuel tetikleme

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Boolean değeri küçük harfle

env:
  DOCKERHUB_USERNAME: meyfcsalik # Kendi Docker Hub kullanıcı adınızı buraya girin

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_full }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
      image_tag_full_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
      image_tag_full_backend: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
    services: # Testler için MongoDB servisi
      mongodb_test:
        image: mongo:6.0
        ports: [27017:27017]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js with Cache v2
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.lock
      
      - name: Set Output Variables (Commit SHA)
        id: vars
        run: echo "sha_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          fi

      - name: Frontend - Install Dependencies & Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present

      - name: Frontend - Run Tests
        working-directory: ./frontend
        run: npm test --if-present -- --watchAll=false --coverage

      - name: Frontend - Build
        working-directory: ./frontend
        run: npm run build

      - name: Backend - Install Dependencies & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present

      - name: Backend - Run Tests
        working-directory: ./backend
        run: npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://localhost:27017/myapp_test

      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: HEAD~1
          head: HEAD
          extra_args: --regex-exclude 'mongodb:\/\/localhost:27017' # MongoDB URI'sini Regex olarak dışla
        continue-on-error: true # Boolean değeri küçük harfle

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
          no-cache: true

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
          no-cache: true

  deploy:
    name: Deploy to K3s and Run Security/E2E Tests via Ansible
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: self-hosted 
    environment: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Repository on Self-Hosted Runner
        uses: actions/checkout@v4

      - name: Debug Print Current Working Directory
        run: |
          pwd
          ls -F
          ls -F ansible/
          ls -F helm/myapp # Helm chart'ın ana dizini

      - name: Set up Python and Install Ansible on Self-Hosted Runner
        run: |
          sudo apt-get update
          # Sanal ortam için gerekli paketi yükle
          sudo apt-get install -y python3-venv
          
          # Sanal ortam oluştur ve etkinleştir
          python3 -m venv .venv
          source .venv/bin/activate
          
          # Ansible ve openshift'i sanal ortama kur
          pip install ansible openshift 
          # Sanal ortamdan çıktığınızda pip install'lar kaybolur, ancak pipeline süresince aktif kalır.

      - name: Configure SSH Private Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.K3S_SSH_PRIVATE_KEY }}" > ~/.ssh/k8s_cluster_key.pem
          chmod 600 ~/.ssh/k8s_cluster_key.pem 

      - name: Create Ansible Inventory File on Runner
        run: |
          mkdir -p ansible # Eğer silinmişse tekrar oluştur
          rm -f ansible/k3s-cluster.ini # Eski dosyayı temizle
          
          printf "[k8s_cluster]\n" > ansible/k3s-cluster.ini
          printf "master ansible_host=192.168.0.60 ansible_user=mustafa ansible_ssh_private_key_file=~/.ssh/k8s_cluster_key.pem\n" >> ansible/k3s-cluster.ini
          
          # Oluşturulan dosyayı doğrulayın (hata ayıklama için)
          echo "--- Content of newly created k3s-cluster.ini ---"
          cat ansible/k3s-cluster.ini
          echo "------------------------------------------------"
          ls -l ansible/k3s-cluster.ini
          chmod 644 ansible/k3s-cluster.ini 

      - name: Provide Ansible Vault Password
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt 

      - name: Run Ansible Playbook for Deployment, Security and E2E Tests
        shell: bash
        run: |
          # Sanal ortamı yeniden etkinleştir (önceki adımın shell'i kapandığı için)
          source .venv/bin/activate
          
          # --- Ansible Envanter ve Bağlantı Hata Ayıklama Başlangıcı ---
          echo "--- Debugging Ansible Inventory and Connectivity ---"
          which ansible # Ansible'ın nerede olduğunu göster (sanal ortamdaki)
          ansible --version # Ansible sürümünü göster
          echo "Contents of ansible/k3s-cluster.ini:"
          cat ansible/k3s-cluster.ini # Envanter dosyasının içeriğini göster
          echo "Ansible Inventory List (should show k8s_cluster and master host):"
          ansible-inventory -i ansible/k3s-cluster.ini --list # Ansible'ın envanteri nasıl gördüğünü göster
          echo "Testing SSH connectivity to master (192.168.0.60):"
          ssh -i ~/.ssh/k8s_cluster_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null mustafa@192.168.0.60 'echo Connected && exit' || echo "SSH connection to 192.168.0.60 failed."
          echo "--- End Debugging Ansible Inventory and Connectivity ---"

          # Frontend ve Backend imaj etiketlerini Bash değişkenlerine al
          FRONTEND_FULL_TAG="${{ needs.test-and-build.outputs.image_tag_full_frontend }}"
          BACKEND_FULL_TAG="${{ needs.test-and-build.outputs.image_tag_full_backend }}" 

          # Bash string manipülasyonu ile sadece etiketi al (ör: "repo/image:tag" -> "tag")
          FRONTEND_ONLY_TAG="${FRONTEND_FULL_TAG##*:}"
          BACKEND_ONLY_TAG="${BACKEND_FULL_TAG##*:}"

          ansible-playbook ansible/deploy.yaml \
            -i ansible/k3s-cluster.ini \
            --vault-password-file vault_pass.txt \
            --extra-vars "helm_release_name=my-app" \
            --extra-vars "k8s_namespace=default" \
            --extra-vars "helm_chart_path=../helm/myapp" \ # Helm chart'ın doğru göreceli yolu
            --extra-vars "frontend_image_repo=${{ env.DOCKERHUB_USERNAME }}/frontend" \
            --extra-vars "frontend_image_tag=${FRONTEND_ONLY_TAG}" \
            --extra-vars "backend_image_repo=${{ env.DOCKERHUB_USERNAME }}/backend" \
            --extra-vars "backend_image_tag=${BACKEND_ONLY_TAG}" \
            --extra-vars "app_domain=uygulama-adi-${{ needs.test-and-build.outputs.deploy_env }}.example.com" \
            --extra-vars "deploy_env_name=${{ needs.test-and-build.outputs.deploy_env }}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Clean up Vault Password File
        if: always() 
        run: rm -f vault_pass.txt