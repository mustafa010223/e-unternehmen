name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main # Production branch
      - develop # Staging branch
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Manuel tetikleme için

env:
  DOCKERHUB_USERNAME: meyfcsalik # KENDİ DOCKER HUB KULLANICI ADINLA DEĞİŞTİR
  K3S_SERVER_PROJECT_PATH: /home/mustafa/e-unternehmen # K3S SUNUCU KULLANICI ADIN VE PROJE YOLUNU GÜNCELLE

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
      docker_repo_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend
      docker_repo_backend: ${{ env.DOCKERHUB_USERNAME }}/backend
    services:
      mongodb_test: # Backend testleri için MongoDB servisi
        image: mongo:6.0
        ports:
          - 27017:27017
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Projenize uygun Node.js versiyonu
          cache: 'npm'

      - name: Set Output Variables (Commit SHA, Environment Name)
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          else # PRs or other branches default to staging for build/test
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # --- Frontend Steps ---
      - name: Frontend - Install Dependencies & Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present
      - name: Frontend - Run Tests
        working-directory: ./frontend
        run: npm test --if-present -- --watchAll=false --coverage
      - name: Frontend - Build
        working-directory: ./frontend
        run: npm run build

      # --- Backend Steps ---
      - name: Backend - Install Dependencies & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present
      - name: Backend - Run Tests
        working-directory: ./backend
        run: npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://mongodb_test:27017/myapp_test # Test DB bağlantısı

      # --- Security Scans (Örnekler) ---
      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug

      - name: Audit NPM Dependencies (Frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=high || echo "NPM audit (frontend) found vulnerabilities, but continuing."

      - name: Audit NPM Dependencies (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=high || echo "NPM audit (backend) found vulnerabilities, but continuing."

      # --- Docker Build and Push (Sadece main/develop branch push'larında) ---
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # GitHub Secret'tan alınacak

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-latest
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-latest
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    name: Deploy to K3s using Ansible
    needs: test-and-build # 'test-and-build' job'ı bittikten sonra başlar
    # Sadece main veya develop branch'ine push yapıldığında çalışır
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    environment: # GitHub Environments ile entegrasyon (manuel onay için ayarlanabilir)
      name: ${{ needs.test-and-build.outputs.deploy_env }}
      # url: http://<your-k3s-node-ip>:30080 # Uygulamanızın URL'i
    steps:
      - name: Checkout Repository (Ansible playbook ve Helm chart'ları için)
        uses: actions/checkout@v4

      - name: Deploy to K3s via SSH using Ansible
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K3S_HOST_IP }} # GitHub Secret'tan alınacak
          username: ${{ secrets.K3S_USER }} # GitHub Secret'tan alınacak
          key: ${{ secrets.K3S_SSH_PRIVATE_KEY }} # GitHub Secret'tan alınacak
          script: |
            cd ${{ env.K3S_SERVER_PROJECT_PATH }}
            git checkout ${{ github.ref_name }} # Doğru branch'i checkout et
            git pull origin ${{ github.ref_name }}
            ansible-playbook ansible/deploy.yml --extra-vars "helm_env=${{ needs.test-and-build.outputs.deploy_env }} image_tag=${{ needs.test-and-build.outputs.image_tag }} docker_username=${{ env.DOCKERHUB_USERNAME }}"

      # - name: Slack Notification on Success
      #   if: success()
      #   uses: slackapi/slack-github-action@v1.26.0 # Veya güncel versiyon
      #   with:
      #     payload: |
      #       {
      #         "text": "✅ *Deployment Successful to ${{ needs.test-and-build.outputs.deploy_env }}!*",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "✅ *Deployment Successful!* \n🌐 Environment: `${{ needs.test-and-build.outputs.deploy_env }}` \n📦 Commit: `${{ github.sha }}` \n🏷️ Image Tag: `${{ needs.test-and-build.outputs.image_tag }}` \n🔗 <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View Commit>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # GitHub Secret'tan alınacak

      # - name: Slack Notification on Failure
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.26.0 # Veya güncel versiyon
      #   with:
      #     payload: |
      #       {
      #         "text": "❌ *Deployment Failed to ${{ needs.test-and-build.outputs.deploy_env }}!*",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "❌ *Deployment Failed!* \n🌐 Environment: `${{ needs.test-and-build.outputs.deploy_env }}` \n📦 Commit: `${{ github.sha }}` \n🔗 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
