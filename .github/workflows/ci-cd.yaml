name: CI/CD Pipeline for Microservices v2

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_USERNAME: meyfcsalik

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_full }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
      image_tag_full_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
      image_tag_full_backend: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
    services:
      mongodb_test:
        image: mongo:6.0
        ports: [27017:27017]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js with Cache v2
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json  # Düzeltildi: package-lock.lock -> package-lock.json

      - name: Set Output Variables (Commit SHA)
        id: vars
        run: echo "sha_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          fi

      - name: Frontend - Install Dependencies & Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present

      - name: Frontend - Run Tests
        working-directory: ./frontend
        run: npm test --if-present -- --watchAll=false --coverage

      - name: Frontend - Build
        working-directory: ./frontend
        run: npm run build

      - name: Backend - Install Dependencies & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present

      - name: Backend - Run Tests
        working-directory: ./backend
        run: npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://mongodb_test:27017/myapp_test  # Konteyner ismi kullanıldı

      - name: TruffleHog Scan (Official Action)
        uses: trufflesecurity/trufflehog-action@main
        with:
          path: ./
          base: HEAD~1
          head: HEAD
          fail: false  # Hata durumunda işlemi sonlandırmaz

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
          cache-from: type=gha  # Docker katman önbellekleme
          cache-to: type=gha,mode=max

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to K3s
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: self-hosted
    environment: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Ansible via Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Configure SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.K3S_SSH_PRIVATE_KEY }}" > ~/.ssh/k8s_cluster_key
          chmod 600 ~/.ssh/k8s_cluster_key

      - name: Run Ansible Playbook
        run: |
          docker run --rm -v $(pwd):/work -w /work \
            -e ANSIBLE_VAULT_PASSWORD="${{ secrets.ANSIBLE_VAULT_PASSWORD }}" \
            ansible/ansible-runner:latest \
            ansible-playbook ansible/deploy.yaml \
              -i ansible/k3s-cluster.ini \
              --vault-password=$ANSIBLE_VAULT_PASSWORD \
              --extra-vars "helm_release_name=my-app" \
              --extra-vars "k8s_namespace=default" \
              --extra-vars "helm_chart_path=../helm/myapp/" \
              --extra-vars "frontend_image=${{ needs.test-and-build.outputs.image_tag_full_frontend }}" \
              --extra-vars "backend_image=${{ needs.test-and-build.outputs.image_tag_full_backend }}" \
              --extra-vars "app_domain=uygulama-adi-${{ needs.test-and-build.outputs.deploy_env }}.example.com"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
