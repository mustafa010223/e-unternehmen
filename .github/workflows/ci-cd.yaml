name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_USERNAME: meyfcsalik

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      # Bu çıktılar 'deploy' işi tarafından kullanılmak için doğrudur.
      image_tag_full_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
      image_tag_full_backend: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
    services:
      mongodb_test:
        image: mongo:6.0
        ports: ['27017:27017']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json
      
      - name: Set Output Variables (Short Commit SHA)
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> "$GITHUB_OUTPUT"
          else
            echo "DEPLOY_ENV=staging" >> "$GITHUB_OUTPUT"
          fi

      - name: Frontend - Install, Lint, Test, and Build
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present
          npm test --if-present -- --watchAll=false --coverage
          npm run build

      - name: Backend - Install, Lint, and Test
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present
          npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://localhost:27017/my-app_test

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          # DÜZELTME: 'jobs.' yerine, aynı işteki önceki adımlardan gelen
          # çıktılar kullanılarak etiket doğru şekilde oluşturuluyor.
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
          no-cache: true

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          # DÜZELTME: 'jobs.' yerine, aynı işteki önceki adımlardan gelen
          # çıktılar kullanılarak etiket doğru şekilde oluşturuluyor.
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
          no-cache: true

  deploy:
    name: Deploy to K3s and Run Security/E2E Tests via Ansible
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: self-hosted
    environment: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Repository on Self-Hosted Runner
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set up Python and Install Ansible
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install ansible openshift kubernetes

      - name: Configure SSH Private Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.K3S_SSH_PRIVATE_KEY }}" > ~/.ssh/k8s_cluster_key.pem
          chmod 600 ~/.ssh/k8s_cluster_key.pem

      - name: Create Correct Ansible Inventory File on Runner
        run: |
          mkdir -p ansible
          cat <<EOF > ansible/k3s-cluster.ini
          [k3s_cluster]
          k3s-server ansible_host=192.168.0.60 ansible_user=mustafa ansible_ssh_private_key_file=~/.ssh/k8s_cluster_key.pem

          [k3s_cluster:vars]
          ansible_env='{"KUBECONFIG":"/home/mustafa/kubeconfig"}'
          EOF
          
          echo "--- Content of inventory file ---"
          cat ansible/k3s-cluster.ini

      - name: Provide Ansible Vault Password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt

      - name: Run Ansible Playbook for Deployment
        shell: bash
        run: |
          source .venv/bin/activate
          
          FRONTEND_TAG_FULL="${{ needs.test-and-build.outputs.image_tag_full_frontend }}"
          BACKEND_TAG_FULL="${{ needs.test-and-build.outputs.image_tag_full_backend }}"
          
          FRONTEND_TAG_ONLY="${FRONTEND_TAG_FULL##*:}"
          BACKEND_TAG_ONLY="${BACKEND_TAG_FULL##*:}"
          
          ansible-playbook ansible/playbook.yaml \
            -i ansible/k3s-cluster.ini \
            --vault-password-file vault_pass.txt \
            --extra-vars "frontend_image_repo=${{ env.DOCKERHUB_USERNAME }}/frontend" \
            --extra-vars "frontend_image_tag=${FRONTEND_TAG_ONLY}" \
            --extra-vars "backend_image_repo=${{ env.DOCKERHUB_USERNAME }}/backend" \
            --extra-vars "backend_image_tag=${BACKEND_TAG_ONLY}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Clean up Vault Password File
        if: always()
        run: rm -f vault_pass.txt