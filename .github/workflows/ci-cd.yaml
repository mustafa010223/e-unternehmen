name: CI/CD Pipeline Optimization and Security Review

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Enforce least privilege for GITHUB_TOKEN at the workflow level.
# Default permissions are set to read-only for most scopes,
# and will be explicitly elevated only where necessary for specific jobs.
permissions:
  contents: read
  packages: write # Necessary for pushing Docker images
  pull-requests: write # Required for TruffleHog to create PR comments/issues
  id-token: write # Required for OIDC, if implemented later

jobs:
  # It's often better to separate frontend and backend into distinct jobs (e.g., build-backend, build-frontend)
  # for better parallelism and clearer separation of concerns.
  # However, for this example, we'll keep them in one job by using 'working-directory'.
  build-and-test:
    runs-on: ubuntu-latest

    # Explicitly define permissions for this job, adhering to least privilege.
    permissions:
      contents: write # Needed for actions/checkout to fetch code
      packages: write # If this job publishes npm packages or Docker images
      pull-requests: write # If this job comments on PRs or creates issues
      id-token: write # If OIDC is used for cloud auth

    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb5afa53ea30b477e051d1 # v4.1.1 SHA

      # --- Backend Build and Test ---
      - name: Setup Node.js Environment for Backend with Caching
        uses: actions/setup-node@v4.0.2 # v4.0.2 SHA
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json' # Point to backend's lockfile

      - name: Install Backend Node.js Dependencies
        run: npm ci
        working-directory: backend # Run npm ci in the backend directory

      - name: Run Backend Unit Tests
        run: npm test
        working-directory: backend # Run npm test in the backend directory

      - name: Setup Docker Buildx for Backend
        uses: docker/setup-buildx-action@v3.0.0 # v3.0.0 SHA

      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v5.0.0 # v5.0.0 SHA
        with:
          context: backend # Dockerfile for backend is in the 'backend' directory
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: your-repo/your-app-backend:latest,your-repo/your-app-backend:${{ github.sha }} # Differentiate tags

      # --- Frontend Build and Test ---
      - name: Setup Node.js Environment for Frontend with Caching
        uses: actions/setup-node@v4.0.2 # v4.0.2 SHA
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json' # Point to frontend's lockfile

      - name: Install Frontend Node.js Dependencies
        run: npm ci
        working-directory: frontend # Run npm ci in the frontend directory

      - name: Run Frontend Unit Tests
        run: npm test
        working-directory: frontend # Run npm test in the frontend directory

      - name: Setup Docker Buildx for Frontend
        uses: docker/setup-buildx-action@v3.0.0 # v3.0.0 SHA

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5.0.0 # v5.0.0 SHA
        with:
          context: frontend # Dockerfile for frontend is in the 'frontend' directory
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: your-repo/your-app-frontend:latest,your-repo/your-app-frontend:${{ github.sha }} # Differentiate tags

---

  secret-scanning:
    runs-on: ubuntu-latest
    needs: build-and-test # Ensure builds/tests pass before scanning for secrets
    permissions:
      contents: read # TruffleHog needs to read repository contents
      pull-requests: write # TruffleHog might create PR comments/issues

    steps:
      - name: Checkout Repository for Secret Scan
        uses: actions/checkout@b4ffde65f46336ab88eb5afa53ea30b477e051d1 # v4.1.1 SHA
        with:
          fetch-depth: 0 # TruffleHog needs full history for git scans

      - name: TruffleHog - Secrets Scan
        uses: trufflesecurity/trufflehog@v3.89.1 # Use the latest stable version
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --no-verify --fail --exclude-paths .trufflehogignore # .trufflehogignore is at repo root
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---

  ansible-deployment:
    runs-on: ubuntu-latest
    needs: build-and-test # Depends on successful build and tests
    environment: production # Example: Deploy to a 'production' environment with required reviewers
    permissions:
      contents: read # For checking out Ansible playbooks
      # If Ansible interacts with GitHub APIs, additional permissions might be needed.

    steps:
      - name: Checkout Repository for Ansible
        uses: actions/checkout@b4ffde65f46336ab88eb5afa53ea30b477e051d1 # v4.1.1 SHA

      - name: Setup Python for Ansible
        uses: actions/setup-python@v5.0.0 # v5.0.0 SHA
        with:
          python-version: '3.x'

      - name: Install Ansible and Kubernetes/OpenShift Collection
        run: |
          pip install ansible
          ansible-galaxy collection install kubernetes.core
          pip install kubernetes # Required for kubernetes.core collection

      - name: Prepare Ansible Vault Password File
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_password
        shell: bash
      - name: Set Permissions for Vault Password File
        run: chmod 600 .vault_password

      - name: Run Ansible Playbook for Deployment
        run: |
          ansible-playbook deploy.yaml \
            -i hosts.ini \
            --vault-password-file .vault_password \
            -e "app_version_backend=${{ github.sha }}" \ # Pass backend image SHA
            -e "app_version_frontend=${{ github.sha }}" # Pass frontend image SHA
        working-directory: ansible # Execute Ansible commands from the 'ansible' directory
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: .vault_password
        # Critical: Use no_log: true on any Ansible task that handles plaintext sensitive data
        # to prevent secrets from appearing in logs.

      - name: Clean up Ansible Vault Password File
        run: rm .vault_password