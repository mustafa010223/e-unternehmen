name: CI/CD Pipeline Optimization and Security Review

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# GitHub_TOKEN için en az ayrıcalık ilkesini uygulayın.
# Varsayılan izinler çoğu kapsam için salt okunurdur,
# ve yalnızca belirli işler için gerektiğinde açıkça yükseltilecektir.
permissions:
  contents: read
  packages: write # Docker imajlarını göndermek için gereklidir
  pull-requests: write # TruffleHog'un PR yorumları/sorunları oluşturması için gereklidir
  id-token: write # OIDC (OpenID Connect) uygulanırsa gereklidir

jobs:
  # Not: Frontend ve backend build'lerini ayrı işlere ayırmak (örn. build-backend, build-frontend)
  # paralellik ve daha net sorumluluk ayrımı için daha iyi olabilir.
  # Ancak, bu örnekte 'working-directory' kullanarak tek bir işte bir arada tutuyoruz.
  build-and-test:
    runs-on: ubuntu-latest

    # Bu iş için izinleri açıkça tanımlayın, en az ayrıcalık ilkesine bağlı kalarak.
    permissions:
      contents: write # Kod çekmek için actions/checkout'a gerekli
      packages: write # Bu iş npm paketleri veya Docker imajları yayınlıyorsa gerekli
      pull-requests: write # Bu iş PR'lara yorum yapıyorsa veya sorun oluşturuyorsa gerekli
      id-token: write # Bulut yetkilendirmesi için OIDC kullanılıyorsa gerekli

    steps:
      - name: Depoyu Çek (Checkout Repository)
        uses: actions/checkout@8e515d0547900b96968d86f784e1320034d6ac2a # v4.1.6 SHA

      # --- Backend Build ve Test ---
      - name: Backend için Node.js Ortamını Önbellekleme ile Kur
        uses: actions/setup-node@v4.0.2 # v4.0.2 SHA
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json' # Backend'in lockfile'ına işaret eder

      - name: Backend Node.js Bağımlılıklarını Kur
        run: npm ci # 'npm ci', tekrarlanabilir build'ler için package-lock.json'daki tam sürümleri sağlar.
        working-directory: backend # Komutu backend dizininde çalıştır

      - name: Backend Birim Testlerini Çalıştır
        run: npm test
        working-directory: backend # Testleri backend dizininde çalıştır

      - name: Backend için Docker Buildx Kurulumu
        uses: docker/setup-buildx-action@v3.0.0 # v3.0.0 SHA

      - name: Backend Docker İmajını Oluştur ve Gönder
        uses: docker/build-push-action@v5.0.0 # v5.0.0 SHA
        with:
          context: backend # Backend Dockerfile 'backend' dizininde
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Yalnızca main dalına push yapıldığında gönder
          tags: your-repo/your-app-backend:latest,your-repo/your-app-backend:${{ github.sha }} # İmaj etiketlerini ayırt et

      # --- Frontend Build ve Test ---
      - name: Frontend için Node.js Ortamını Önbellekleme ile Kur
        uses: actions/setup-node@v4.0.2 # v4.0.2 SHA
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json' # Frontend'in lockfile'ına işaret eder

      - name: Frontend Node.js Bağımlılıklarını Kur
        run: npm ci
        working-directory: frontend # Komutu frontend dizininde çalıştır

      - name: Frontend Birim Testlerini Çalıştır
        run: npm test
        working-directory: frontend # Testleri frontend dizininde çalıştır

      - name: Frontend için Docker Buildx Kurulumu
        uses: docker/setup-buildx-action@v3.0.0 # v3.0.0 SHA

      - name: Frontend Docker İmajını Oluştur ve Gönder
        uses: docker/build-push-action@v5.0.0 # v5.0.0 SHA
        with:
          context: frontend # Frontend Dockerfile 'frontend' dizininde
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Yalnızca main dalına push yapıldığında gönder
          tags: your-repo/your-app-frontend:latest,your-repo/your-app-frontend:${{ github.sha }} # İmaj etiketlerini ayırt et

  ---

  secret-scanning:
    runs-on: ubuntu-latest
    needs: build-and-test # Sır taramadan önce build ve testlerin geçmesini sağlar
    permissions:
      contents: read # TruffleHog'un depo içeriğini okuması için gerekli
      pull-requests: write # TruffleHog'un PR yorumları/sorunları oluşturması için gerekli

    steps:
      - name: Sır Taraması için Depoyu Çek
        uses: actions/checkout@8e515d0547900b96968d86f784e1320034d6ac2a # v4.1.6 SHA
        with:
          fetch-depth: 0 # TruffleHog'un git taramaları için tam geçmişe ihtiyacı var

      - name: TruffleHog - Sır Taraması
        uses: trufflesecurity/trufflehog@v3.89.1 # En son stabil sürümü kullanın
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --no-verify --fail --exclude-paths .trufflehogignore # .trufflehogignore depo kök dizininde
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # TruffleHog API etkileşimi için GITHUB_TOKEN kullanır

  ---

  ansible-deployment:
    runs-on: ubuntu-latest
    needs: build-and-test # Başarılı build ve testlere bağlıdır
    environment: production # Örnek: 'production' ortamına dağıtım ve gerekli onaylayıcılar
    permissions:
      contents: read # Ansible playbook'larını çekmek için gerekli
      # Ansible GitHub API'leri ile etkileşime giriyorsa ek izinler gerekebilir.

    steps:
      - name: Ansible için Depoyu Çek
        uses: actions/checkout@8e515d0547900b96968d86f784e1320034d6ac2a # v4.1.6 SHA

      - name: Ansible için Python Kurulumu
        uses: actions/setup-python@v5.0.0 # v5.0.0 SHA
        with:
          python-version: '3.x'

      - name: Ansible ve Kubernetes/OpenShift Koleksiyonunu Kur
        run: |
          pip install ansible
          ansible-galaxy collection install kubernetes.core
          pip install kubernetes # kubernetes.core koleksiyonu için gerekli

      - name: Ansible Vault Parola Dosyasını Hazırla
        # Ansible Vault parolası asla Git'e commit edilmemelidir.
        # Güvenli bir şekilde GitHub Sırları aracılığıyla sağlanır ve geçici bir dosyaya yazılır.
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_password
        shell: bash
      - name: Vault Parola Dosyası için İzinleri Ayarla
        run: chmod 600 .vault_password

      - name: Dağıtım için Ansible Playbook'u Çalıştır
        run: |
          ansible-playbook deploy.yaml \
            -i hosts.ini \
            --vault-password-file .vault_password \
            -e "app_version_backend=${{ github.sha }}" \ # Backend imaj SHA'sını ilet
            -e "app_version_frontend=${{ github.sha }}" # Frontend imaj SHA'sını ilet
        working-directory: ansible # Ansible komutlarını 'ansible' dizininden yürüt
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: .vault_password # Vault parolasını sağlamanın alternatif yolu
        # Kritik: Düz metin hassas verileri işleyen herhangi bir Ansible görevinde no_log: true kullanın
        # sırların günlüklerde görünmesini önlemek için.

      - name: Ansible Vault Parola Dosyasını Temizle
        run: rm .vault_password
        # Geçici parola dosyasının kullanımdan sonra kaldırıldığından emin olun.