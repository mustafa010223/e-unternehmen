name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# 'concurrency' anahtarı 'on' bloğunun dışına, doğru yere taşındı.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_USERNAME: meyfcsalik
  K3S_SERVER_PROJECT_PATH: /home/mustafa/e-unternehmen
  HELM_CHART_PATH: helm/myapp
  HELM_RELEASE_NAME: myapp

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_full }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
      image_tag_full_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
      image_tag_full_backend: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
    services:
      mongodb_test:
        image: mongo:6.0
        ports: [27017:27017]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json
      - name: Set Output Variables (Commit SHA)
        id: vars
        run: echo "sha_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          fi
      - name: Frontend - Install Dependencies & Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present
      - name: Frontend - Run Tests
        working-directory: ./frontend
        run: npm test --if-present -- --watchAll=false --coverage
      - name: Frontend - Build
        working-directory: ./frontend
        run: npm run build
      - name: Backend - Install Dependencies & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present
      - name: Backend - Run Tests
        working-directory: ./backend
        run: npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://localhost:27017/myapp_test
      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before || 'HEAD' }}
      - name: Log in to Docker Hub
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Frontend Docker Image
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}
      - name: Build and Push Backend Docker Image
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_full }}

  deploy:
    name: Deploy to K3s
    needs: test-and-build
    if: ${{ github.event_name == 'push' }}
    runs-on: self-hosted
    environment: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Mask Secrets
        run: |
          echo "::add-mask::${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_PASSWORD }}"
      - name: Configure Git Credentials
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global credential.helper 'store --file ~/.git-credentials'
          echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials
      - name: Deploy via Ansible
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K3S_HOST_IP }}
          username: ${{ secrets.K3S_USER }}
          key: ${{ secrets.K3S_SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ env.K3S_SERVER_PROJECT_PATH }}
            git pull origin ${{ github.ref }}
            cat > vault_vars.yml <<EOF
            vault_grafana_password: "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
            vault_docker_username: "${{ env.DOCKERHUB_USERNAME }}"
            EOF
            ansible-vault encrypt vault_vars.yml --vault-password=${{ secrets.ANSIBLE_VAULT_PASSWORD }}
            if helm history ${{ env.HELM_RELEASE_NAME }} | grep -q DEPLOYED; then
              ROLLBACK_CMD="helm rollback ${{ env.HELM_RELEASE_NAME }}"
            else
              ROLLBACK_CMD="echo 'No rollback needed'"
            fi
            ansible-playbook ansible/deploy.yml \
              --vault-password-file <(echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}") \
              --extra-vars "image_tag=${{ needs.test-and-build.outputs.image_tag }} helm_env=${{ needs.test-and-build.outputs.deploy_env }} rollback_cmd='$ROLLBACK_CMD'"
            rm -f vault_vars.yml
      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K3S_HOST_IP }}
          username: ${{ secrets.K3S_USER }}
          key: ${{ secrets.K3S_SSH_PRIVATE_KEY }}
          script: |
            APP_PORT=$(kubectl get svc/${{ env.HELM_RELEASE_NAME }}-service -o jsonpath='{.spec.ports[0].port}')
            curl -sSf http://${{ env.HELM_RELEASE_NAME }}-service:$APP_PORT/health
      - name: Rollback if Failed
        if: ${{ failure() }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K3S_HOST_IP }}
          script: |
            if helm history ${{ env.HELM_RELEASE_NAME }} | grep -q DEPLOYED; then
              helm rollback ${{ env.HELM_RELEASE_NAME }}
            fi

