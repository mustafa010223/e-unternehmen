name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main # Production branch
      - develop # Staging branch
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Manuel tetikleme için

env:
  DOCKERHUB_USERNAME: meyfcsalik
  K3S_SERVER_PROJECT_PATH: /home/mustafa/e-unternehmen # K3s sunucunuzdaki proje yolu
  HELM_CHART_PATH: helm/myapp # Chart'ınızın yolu (proje köküne göre)
  HELM_RELEASE_NAME: myapp # Helm release adı

jobs:
  test-and-build:
    name: Test, Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}
      deploy_env: ${{ steps.set_env.outputs.DEPLOY_ENV }}
      image_tag_full_frontend: ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
      image_tag_full_backend: ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
    services:
      mongodb_test:
        image: mongo:6.0
        ports:
          - 27017:27017
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Set Output Variables (Commit SHA & Environment)
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Determine Environment Name
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.base_ref }}" == "main" && "${{ github.event_name }}" == "pull_request" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT # PR'lar için test/build amacıyla
          elif [[ "${{ github.base_ref }}" == "develop" && "${{ github.event_name }}" == "pull_request" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT # PR'lar için test/build amacıyla
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT # Diğer durumlar için varsayılan
          fi
        shell: bash

      - name: Frontend - Install Dependencies & Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present

      - name: Frontend - Run Tests
        working-directory: ./frontend
        run: npm test --if-present -- --watchAll=false --coverage

      - name: Frontend - Build
        working-directory: ./frontend
        run: npm run build

      - name: Backend - Install Dependencies & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present

      - name: Backend - Run Tests
        working-directory: ./backend
        run: npm test --if-present -- --watchAll=false --coverage
        env:
          MONGO_URL: mongodb://mongodb_test:27017/myapp_test

      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop'))
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before || github.event.repository.default_branch }}
          head: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Audit NPM Dependencies (Frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=high || echo "NPM audit (frontend) found vulnerabilities, but continuing."

      - name: Audit NPM Dependencies (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=high || echo "NPM audit (backend) found vulnerabilities, but continuing."

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Docker Hub token'ınız

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/frontend:${{ steps.set_env.outputs.DEPLOY_ENV }}-latest

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.vars.outputs.sha_short }}
            ${{ env.DOCKERHUB_USERNAME }}/backend:${{ steps.set_env.outputs.DEPLOY_ENV }}-latest

  deploy:
    name: Deploy to K3s using Ansible
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: self-hosted # Kendi runner'ınızda çalışacak
    environment:
      name: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Repository (on runner)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }} # Deploy edilecek kesin commit

      - name: Deploy to K3s via SSH using Ansible
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K3S_HOST_IP }}
          username: ${{ secrets.K3S_USER }}
          key: ${{ secrets.K3S_SSH_PRIVATE_KEY }}
          script: |
            set -e # Herhangi bir komut hata verirse script'i durdur
            echo "--- Updating project repository on K3s server ---"
            cd ${{ env.K3S_SERVER_PROJECT_PATH }}
            git fetch --all
            git checkout ${{ github.sha }} # Sunucuda da aynı commit'i checkout et
            echo "--- Running Ansible Playbook for Helm Deployment ---"
            ansible-playbook ansible/deploy.yml \
              --extra-vars "helm_env=${{ needs.test-and-build.outputs.deploy_env }} \
                            image_tag=${{ needs.test-and-build.outputs.image_tag }} \
                            docker_username=${{ env.DOCKERHUB_USERNAME }} \
                            helm_chart_path_on_server=${{ env.K3S_SERVER_PROJECT_PATH }}/${{ env.HELM_CHART_PATH }} \
                            helm_release_name=${{ env.HELM_RELEASE_NAME }} \
                            grafana_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
            echo "--- Deployment finished ---"

      # Opsiyonel: Helm Rollback mantığı burada eklenebilir
      # Veya Ansible playbook içinde --atomic ile yönetilebilir