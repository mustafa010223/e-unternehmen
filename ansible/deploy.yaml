deploy:
    name: Deploy to K3s and Run Security/E2E Tests via Ansible
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: self-hosted # Kendinden barındırılan koşucu gereklidir
    environment: ${{ needs.test-and-build.outputs.deploy_env }}
    steps:
      - name: Checkout Repository on Self-Hosted Runner
        uses: actions/checkout@v4

      - name: Debug Print Current Working Directory
        run: |
          pwd
          ls -F
          ls -F ansible/
          ls -F helm/my-app # Dizin adı my-app olarak güncellendiği için

      - name: Set up Python and Install Ansible on Self-Hosted Runner
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install ansible openshift # kubernetes.core modülleri için gerekebilir

      - name: Configure SSH Private Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.K3S_SSH_PRIVATE_KEY }}" > ~/.ssh/k8s_cluster_key.pem
          chmod 600 ~/.ssh/k8s_cluster_key.pem # GitHub Sırları'nda tanımlanmalı

      # BURADA YENİ ADIM: Envanter dosyasını doğrudan runner üzerinde oluştur
      - name: Create Ansible Inventory File on Runner
        run: |
          # Bu adım, envanter dosyasını her çalıştırmada sıfırdan oluşturur.
          # Bu, yerel dosya sistemi sorunlarını (gizli karakterler, kodlama) ortadan kaldırır.
          # 'ansible_user=mustafa' kısmını kendi K3s sunucunuzdaki doğru SSH kullanıcı adıyla değiştirin!
          echo '[k3s_cluster]' > ansible/k3s-cluster.ini
          echo '192.168.0.60 ansible_user=mustafa ansible_ssh_private_key_file=~/.ssh/k8s_cluster_key.pem' >> ansible/k3s-cluster.ini
          
          # Oluşturulan dosyayı doğrulayın (isteğe bağlı hata ayıklama)
          echo "--- Content of newly created k3s-cluster.ini ---"
          cat ansible/k3s-cluster.ini
          echo "------------------------------------------------"

      - name: Provide Ansible Vault Password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt # GitHub Sırları'nda tanımlanmalı
        # Hassas bilgileri loglardan gizlemek istersen, aşağıdaki yorum satırlarını etkinleştir:
        # shell: bash
        # env:
        #   ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        # run: echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt

      - name: Run Ansible Playbook for Deployment, Security and E2E Tests
        run: |
          # Frontend ve Backend imaj etiketlerini Bash değişkenlerine al
          FRONTEND_FULL_TAG="${{ needs.test-and-build.outputs.image_tag_full_frontend }}"
          BACKEND_FULL_TAG="${{ needs.test-and-build.outputs.image_tag_full_backend }}"

          # Bash string manipülasyonu ile sadece etiketi al (ör: "repo/image:tag" -> "tag")
          FRONTEND_ONLY_TAG="${FRONTEND_FULL_TAG##*:}"
          BACKEND_ONLY_TAG="${BACKEND_FULL_TAG##*:}"

          ansible-playbook ansible/deploy.yaml \
            -i ansible/k3s-cluster.ini \
            --vault-password-file vault_pass.txt \
            --extra-vars "helm_release_name=my-app" \
            --extra-vars "k8s_namespace=default" \
            --extra-vars "helm_chart_path=../helm/my-app/" \
            --extra-vars "frontend_image_repo=${{ env.DOCKERHUB_USERNAME }}/frontend" \
            --extra-vars "frontend_image_tag=${FRONTEND_ONLY_TAG}" \
            --extra-vars "backend_image_repo=${{ env.DOCKERHUB_USERNAME }}/backend" \
            --extra-vars "backend_image_tag=${BACKEND_ONLY_TAG}" \
            --extra-vars "app_domain=uygulama-adi-${{ needs.test-and-build.outputs.deploy_env }}.example.com"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Clean up Vault Password File
        if: always()
        run: rm -f vault_pass.txt