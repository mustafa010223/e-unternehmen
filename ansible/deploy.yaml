---
- name: Helm ile Kubernetes Dağıtım ve Güvenlik Denetimi
  hosts: k8s_cluster
  become: true
  vars_files:
    - secrets.yml  # Ansible Vault ile şifrelenmiş dosya

  vars:
    # Bu değişkenler dışarıdan --extra-vars ile sağlanacak
    # Varsayılan değerler tanımlanabilir ancak CI/CD'de dışarıdan geleceklerdir.
    helm_release_name: "my-app" # CI/CD'den gelecek
    k8s_namespace: "default"    # CI/CD'den gelecek
   
    frontend_image_repo: "meyfcsalik/frontend" # CI/CD'den gelecek
    frontend_image_tag: "latest" # CI/CD'den gelecek
    backend_image_repo: "meyfcsalik/backend" # CI/CD'den gelecek
    backend_image_tag: "latest" # CI/CD'den gelecek
    app_domain: "app.mustafasalik.de" # CI/CD'den gelecek
    enable_selenium_tests: true # Varsayılan olarak true, gerekirse False yapılabilir

  tasks:
    # YENİ EKLENEN GÖREV: Selenium test betiği ConfigMap'i oluştur
    - name: Selenium test betiği ConfigMap'i oluştur
      kubernetes.core.k8s:
        state: present
        # selenium-test-configmap.yaml dosyasının bu playbook'a göre yolu
        definition: "{{ lookup('file', '{{ playbook_dir }}/selenium-test-configmap.yaml') | from_yaml }}"
      tags: configmap

    # 1. Helm Dağıtımı
    - name: Helm chart'ı güncelle
      kubernetes.core.helm:
        name: "{{ helm_release_name }}"
        chart_ref: "{{ playbook_dir }}/{{ helm_chart_path }}" # Playbook'un dizinine göre yolu ayarla
        release_namespace: "{{ k8s_namespace }}"
        create_namespace: yes
        
        values:
          frontend:
            image:
              repository: "{{ frontend_image_repo }}"
              tag: "{{ frontend_image_tag }}"
          backend:
            image:
              repository: "{{ backend_image_repo }}"
              tag: "{{ backend_image_tag }}"
      tags: deploy

    # 2. Güvenlik Politikaları
    - name: Pod Security Admission (PSA) uygula
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: policy/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: restricted-psp
          spec:
            privileged: false
            seLinux:
              rule: RunAsAny
            runAsUser:
              rule: MustRunAsNonRoot
            fsGroup:
              rule: RunAsAny
            volumes:
            - 'configMap'
            - 'secret'
      tags: security

    # 3. Ağ Politikası
    - name: Gelişmiş NetworkPolicy tanımla
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: allow-monitoring-only
          spec:
            podSelector: {}
            policyTypes:
            - Ingress
            ingress:
            - ports:
              - protocol: TCP
                port: 9100
              from:
              - namespaceSelector:
                  matchLabels:
                    kubernetes.io/metadata.name: monitoring
      tags: security

    # 4. Test Otomasyonu - Selenium test job'u başlat
    - name: Selenium test job'u başlat
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "{{ helm_release_name }}-selenium-test-{{ lookup('pipe', 'date +%s') }}" # Unique isim için timestamp
            namespace: "{{ k8s_namespace }}"
          spec:
            ttlSecondsAfterFinished: 300 # İş bittikten sonra podu 5 dakika sonra sil
            template:
              spec:
                containers:
                - name: selenium-runner
                  image: python:3.9-slim # Veya kendi test imajınız: meyfcsalik/selenium-test-runner (Bu imajda Selenium ve gerekli driver'lar yüklü olmalı)
                  command: ["python3"]
                  args:
                    - "/app/run_tests.py"
                    - "--env"
                    - "{{ lookup('env', 'DEPLOY_ENV_NAME') }}" # CI/CD'den gelen ortam adı
                    - "--app-url"
                    - "http://{{ helm_release_name }}.{{ k8s_namespace }}.svc.cluster.local" # Uygulamanın K8s cluster içi servisi
                  env: # Selenium Grid adresini burada belirtelim
                    - name: GRID_URL
                      value: "http://selenium-grid:4444/wd/hub" # K8s içinde Selenium Grid servisi varsa
                  volumeMounts:
                    - name: test-scripts-volume
                      mountPath: /app
                volumes:
                  - name: test-scripts-volume
                    configMap:
                      name: selenium-test-script # Selenium test betiğinizi içeren ConfigMap
                restartPolicy: Never
            backoffLimit: 0 # Job'un kaç kez yeniden deneneceği, 0 başarısız olunca durur
      when: enable_selenium_tests
      tags: testing

    # 5. Vault Şifre Rotasyonu
    - name: Vault şifresini otomatik döndür
      ansible.builtin.command: >
        ansible-vault rekey secrets.yml
        --new-vault-password-file {{ playbook_dir }}/vault_pass_new.txt # Yeni şifre dosyasının yolu
      args:
        creates: {{ playbook_dir }}/vault_pass_new.txt # Bu dosya oluşursa komutu tekrar çalıştırma
      run_once: true # Sadece bir kez çalıştır
      tags: vault

  post_tasks:
    - name: Dağıtım başarısını doğrula (Podları kontrol et)
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ k8s_namespace }}"
        label_selectors:
          - app.kubernetes.io/instance={{ helm_release_name }}
      register: deployment_pods
      failed_when: deployment_pods.resources | length == 0 # En az bir pod bulunamazsa başarısız say

    - name: Uygulama sağlık kontrolü
      uri:
        url: "http://{{ helm_release_name }}.{{ k8s_namespace }}.svc.cluster.local/health"
        return_content: yes
      register: health_check
      until: health_check.status == 200
      retries: 10
      delay: 5