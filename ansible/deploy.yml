# ansible/deploy.yml
- name: K3s ve Uygulama Dağıtımı (Ortam Bazlı)
  hosts: localhost
  connection: local
  become: true

  vars:
    helm_chart_path: "{{ playbook_dir }}/../helm"
    release_name: "eunternehmen-release"
    app_namespace: "eunternehmen"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    helm_env: "{{ lookup('env', 'HELM_ENV_OVERRIDE') | default('staging') }}"
    image_tag: "{{ lookup('env', 'IMAGE_TAG_OVERRIDE') | default('latest') }}"
    docker_username: "{{ lookup('env', 'DOCKER_USERNAME_OVERRIDE') | default('meyfcsalik') }}"

  pre_tasks:
    - name: Temel sistem güncellemelerini yap ve gerekli paketleri kur
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - curl
          - gnupg
          - software-properties-common
          - ansible
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Gerekli Python kütüphanelerini pip ile kur (kubernetes)
      ansible.builtin.pip:
        name:
          - kubernetes
        state: present

    - name: Ansible Kubernetes koleksiyonlarını kur (kubernetes.core, community.kubernetes)
      ansible.builtin.shell:
        cmd: "ansible-galaxy collection install kubernetes.core community.kubernetes --force"
      register: galaxy_install_result
      changed_when: galaxy_install_result.rc == 0 and "already installed" not in galaxy_install_result.stdout and "already up-to-date" not in galaxy_install_result.stdout

  tasks:
    - name: Gerekli değişkenlerin tanımlı olduğunu kontrol et
      ansible.builtin.assert:
        that:
          - helm_env is defined and helm_env != ""
          - image_tag is defined and image_tag != ""
          - docker_username is defined and docker_username != ""
        fail_msg: "helm_env, image_tag, ve docker_username değişkenleri eksik veya boş."
      when: lookup('env', 'GITHUB_ACTIONS') == "true"
      run_once: true

    - name: K3s yükleyici script (sadece kurulu değilse)
      ansible.builtin.shell:
        cmd: "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--disable=traefik --write-kubeconfig-mode=644 --node-name={{ ansible_hostname }}' sh -s -"
        creates: /usr/local/bin/k3s
      register: k3s_install_result
      changed_when: k3s_install_result.rc == 0 and "k3s is already installed" not in k3s_install_result.stdout_lines | join(' ')

    - name: K3s servisinin aktif ve çalışır olduğundan emin ol
      ansible.builtin.systemd:
        name: k3s
        enabled: yes
        state: started
      when: k3s_install_result.changed or (k3s_install_result.rc == 0 and not k3s_install_result.changed)

    - name: Kubeconfig dosyasını bekle
      ansible.builtin.wait_for:
        path: "{{ kubeconfig_path }}"
        state: present
        timeout: 60
        delay: 5
      when: k3s_install_result.changed or (k3s_install_result.rc == 0 and not k3s_install_result.changed)

    - name: Helm GPG anahtarını indir ve ekle
      ansible.builtin.shell:
        cmd: "curl -fsSL https://baltocdn.com/helm/signing.asc | gpg --dearmor -o /usr/share/keyrings/helm.gpg"
        creates: /usr/share/keyrings/helm.gpg

    - name: Helm apt deposunu ekle
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        filename: helm-stable-debian
      when: ansible_os_family == "Debian"
      register: helm_repo_added

    - name: APT önbelleğini güncelle
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Helm paketini kur
      ansible.builtin.apt:
        name: helm
        state: present
      when: ansible_os_family == "Debian"

    - name: Kubernetes namespace oluştur
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ app_namespace }}"

    - name: Ortama özel values dosyasının varlığını kontrol et
      ansible.builtin.stat:
        path: "{{ helm_chart_path }}/values-{{ helm_env }}.yaml"
      register: env_values_file

    - name: Helm ile frontend, backend ve mongodb dağıtımı
      community.kubernetes.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        chart_ref: "{{ helm_chart_path }}"
        release_name: "{{ release_name }}"
        release_namespace: "{{ app_namespace }}"
        state: present
        values_files: "{{ [helm_chart_path + '/values.yaml'] + ([helm_chart_path + '/values-' + helm_env + '.yaml'] if env_values_file.stat.exists else []) }}"
        set_values:
          - value: "frontend.image.tag={{ image_tag }}"
            value_type: string
          - value: "backend.image.tag={{ image_tag }}"
            value_type: string
          - value: "frontend.image.repository={{ docker_username }}/frontend"
            value_type: string
          - value: "backend.image.repository={{ docker_username }}/backend"
            value_type: string
      register: helm_deploy_result

    - name: Helm deploy sonucunu göster
      ansible.builtin.debug:
        var: helm_deploy_result
      when: helm_deploy_result is defined
