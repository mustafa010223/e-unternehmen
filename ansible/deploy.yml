- name: K3s ve Uygulama Dağıtımı (Ortam Bazlı)
  hosts: localhost # K3s sunucusunda veya kubectl'in K3s'e erişebildiği bir yerde çalıştırıldığı varsayılır
  connection: local # Ansible'ın doğrudan yerelde komutları çalıştırması için
  become: true # K3s kurulumu ve bazı kubectl/helm komutları için sudo gerekebilir

  vars:
    # helm_chart_path: playbook_dir'e göre ayarlanır.
    # Eğer ansible klasörü proje kök dizinindeyse ve helm klasörü de kök dizindeyse:
    helm_chart_path: "{{ playbook_dir }}/../helm"
    release_name: myapp
    namespace: myapp # Uygulamanın deploy edileceği namespace
    #
    # Bu değişkenler GitHub Actions tarafından --extra-vars ile playbook'a aktarılacak:
    # helm_env: "staging" veya "production"
    # image_tag: "commit_sha" veya "latest"
    # docker_username: "yourdockerhubusername"
    #
    # Playbook'un manuel çalıştırılması ihtimaline karşı varsayılan değerler (opsiyonel):
    helm_env_default: "staging"
    image_tag_default: "latest"
    docker_username_default: "yourdockerhubusername" # KENDİ DOCKER HUB KULLANICI ADINLA DEĞİŞTİR

  tasks:
    - name: Gerekli değişkenlerin tanımlandığından emin ol
      ansible.builtin.assert:
        that:
          - helm_env is defined or helm_env_default is defined
          - image_tag is defined or image_tag_default is defined
          - docker_username is defined or docker_username_default is defined
        fail_msg: "helm_env, image_tag, ve docker_username değişkenleri --extra-vars ile sağlanmalı veya playbook'ta varsayılanları tanımlanmalı."
      run_once: true

    - name: K3s yükleyici script (sadece kurulu değilse)
      ansible.builtin.shell: >
        curl -sfL https://get.k3s.io |
        INSTALL_K3S_EXEC="--disable=traefik --write-kubeconfig-mode=644 --node-name={{ ansible_hostname }}"
        sh -s -
      args:
        creates: /usr/local/bin/k3s # Bu dosya varsa, komut çalışmaz (idempotency)
      register: k3s_install_result
      changed_when: k3s_install_result.rc == 0 and "k3s is already installed" not in k3s_install_result.stdout_lines | join(' ')

    - name: K3s servisinin aktif ve çalışır olduğundan emin ol
      ansible.builtin.systemd:
        name: k3s
        state: started
        enabled: yes
      when: k3s_install_result.changed or (k3s_install_result.rc == 0 and not k3s_install_result.changed) # K3s yeni kurulduysa veya zaten kuruluysa

    - name: Kubectl için K3s kubeconfig dosyasının varlığını kontrol et
      ansible.builtin.wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        state: present
        timeout: 60
      when: k3s_install_result.changed

    - name: Helm kurulumu (sadece kurulu değilse - Debian/Ubuntu için)
      ansible.builtin.apt:
        name: helm
        state: present
      when: ansible_os_family == "Debian"
      # Diğer işletim sistemleri için farklı bir paket yöneticisi veya kurulum metodu gerekebilir.

    - name: Kubernetes namespace oluştur (varsa hata verme)
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
      #ignore_errors: true # k8s modülü zaten idempotent

    # Docker Hub veya özel registry için image pull secret oluşturma (opsiyonel, güvenliğe dikkat!)
    # Bu adım, CI/CD pipeline'ında GitHub secret'larından DOCKERHUB_TOKEN alınarak daha güvenli yönetilebilir.
    # - name: Docker Hub pull secret oluştur/güncelle
    #   kubernetes.core.k8s_secret:
    #     name: dockerhub-pull-secret
    #     namespace: "{{ namespace }}"
    #     type: kubernetes.io/dockerconfigjson
    #     data:
    #       .dockerconfigjson: "{{ lookup('template', 'dockerconfig.json.j2') | b64encode }}"
    #   vars:
    #     # Bu değişkenler normalde Ansible Vault veya CI secret'larından gelmeli
    #     registry_server: "https://index.docker.io/v1/"
    #     registry_username: "{{ docker_username | default(docker_username_default) }}"
    #     registry_password: "{{ lookup('env', 'ANSIBLE_DOCKER_REGISTRY_PASSWORD') }}" # Örnek: Ortam değişkeninden alma

    # - name: Varsayılan service account'a image pull secret ekle
    #   kubernetes.core.k8s_patch:
    #     kind: ServiceAccount
    #     name: default
    #     namespace: "{{ namespace }}"
    #     patch:
    #       - op: add
    #         path: /imagePullSecrets/-
    #         value:
    #           name: dockerhub-pull-secret
    #   when: docker_username is defined # Sadece secret oluşturulduysa

    - name: Helm ile ortama özel values ve imaj tag'i ile deploy et
      ansible.builtin.command: >
        helm upgrade --install {{ release_name }} {{ helm_chart_path }}
        --namespace {{ namespace }}
        --set frontend.image.repository={{ docker_username | default(docker_username_default) }}/frontend
        --set frontend.image.tag={{ image_tag | default(image_tag_default) }}
        --set backend.image.repository={{ docker_username | default(docker_username_default) }}/backend
        --set backend.image.tag={{ image_tag | default(image_tag_default) }}
        -f {{ helm_chart_path }}/values.yaml
        -f {{ helm_chart_path }}/values-{{ helm_env | default(helm_env_default) }}.yaml
        --kubeconfig /etc/rancher/k3s/k3s.yaml
      register: helm_deploy_result
      changed_when: "'release {{ release_name }} has been upgraded' in helm_deploy_result.stdout or 'deployed' in helm_deploy_result.stdout"
      failed_when: helm_deploy_result.rc != 0

    - name: Helm deploy sonucunu göster (debug için)
      ansible.builtin.debug:
        var: helm_deploy_result.stdout_lines
