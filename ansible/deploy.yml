- name: Deploy My Application to K3s
  hosts: localhost # Ansible'ın çalıştığı yer (self-hosted runner veya SSH ile bağlanılan K3s sunucusu)
  # Eğer Ansible K3s sunucusunda çalışıyorsa `become: true` gerekebilir.
  # Eğer self-hosted runner'dan K3s API'sine kubectl/helm ile erişiliyorsa,
  # runner'da kubeconfig ayarlanmış olmalı.
  # Şu anki SSH Action mantığıyla Ansible komutları K3s sunucusunda çalıştırılıyor.
  become: true # Helm ve kubectl için sudo gerekebilir

  vars:
    # Bu değerler --extra-vars ile GitHub Actions'tan gelecek
    helm_env: "staging" # Varsayılan
    image_tag: "latest" # Varsayılan
    docker_username: "meyfcsalik" # Varsayılan
    helm_chart_path_on_server: "/path/to/your/project/helm/myapp" # Varsayılan, override edilecek
    helm_release_name: "myapp" # Varsayılan
    grafana_password: "ChangeThisPasswordInSecrets" # Varsayılan, override edilecek
    # Namespace'i ortam ve release adına göre dinamik oluşturalım
    k8s_namespace: "{{ helm_release_name }}-{{ helm_env }}"

  tasks:
    - name: Ensure Helm is installed
      ansible.builtin.command: helm version
      register: helm_check
      changed_when: false
      failed_when: helm_check.rc != 0
      ignore_errors: true # Hata durumunda aşağıdaki göreve geç

    - name: Install Helm if not present (Debian/Ubuntu)
      ansible.builtin.apt:
        name: helm
        state: present
      when: helm_check.rc != 0 and ansible_os_family == "Debian"

    - name: Create Kubernetes Namespace if it does not exist
      kubernetes.core.k8s: # Ansible Kubernetes Collection'ı gerekir (ansible-galaxy collection install kubernetes.core)
        name: "{{ k8s_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Add Prometheus Community Helm repo
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: "https://prometheus-community.github.io/helm-charts"
        state: present

    - name: Update Helm repositories
      ansible.builtin.command: helm repo update
      changed_when: false # Genellikle durum değiştirmez ama loglamak için

    - name: Deploy application with Helm
      kubernetes.core.helm:
        name: "{{ helm_release_name }}"
        chart_ref: "{{ helm_chart_path_on_server }}" # Sunucudaki chart yolu
        release_namespace: "{{ k8s_namespace }}"
        values_files: # Ortam ve genel values dosyalarını birleştir
          - "{{ helm_chart_path_on_server }}/values.yaml"
          - "{{ helm_chart_path_on_server }}/values-{{ helm_env }}.yaml"
        set_values: # CI/CD'den gelen dinamik değerler
          - { value: "frontend.image.tag={{ image_tag }}", value_type: string }
          - { value: "backend.image.tag={{ image_tag }}", value_type: string }
          - { value: "frontend.image.repository={{ docker_username }}/frontend", value_type: string }
          - { value: "backend.image.repository={{ docker_username }}/backend", value_type: string }
          - { value: "monitoring.kube-prometheus-stack.grafana.adminPassword={{ grafana_password }}", value_type: string }
        state: present # upgrade --install gibi davranır
        atomic: true # Başarısız olursa otomatik rollback
        timeout: 10m
      register: helm_deploy_result

    - name: Show Helm deployment result
      ansible.builtin.debug:
        var: helm_deploy_result.stdout_lines