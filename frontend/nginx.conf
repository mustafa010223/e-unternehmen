events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    server {
        listen 80;
        server_name localhost;

        # Frontend SPA'nın statik dosyalarının kök dizini
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Frontend uygulaması için temel lokasyon:
        # SPA routing'i desteklemek için her zaman index.html'e düşmeli.
        location / {
            try_files \$uri \$uri/ /index.html;
        }

        # API isteklerini backend servisine yönlendir
        location /api/ {
            proxy_pass http://backend:8000; # Backend servisinizin K8s'teki adresi ve portu
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            # Gerekirse backend'e SSL/TLS isteği gönderirken HTTP kullanın
            proxy_http_version 1.1;
            proxy_set_header Connection ""; # Keep-alive bağlantıları için
        }

        # Statik dosyaları (JS, CSS, resimler vb.) doğrudan sun
        # Eğer frontend build çıktınızda 'static' klasörü varsa
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 30d; # Tarayıcı önbelleğinde 30 gün tut
            add_header Cache-Control "public, no-transform";
            # Güvenlik ve performans için otomatik dizin listelemeyi kapat
            autoindex off;
        }

        # Medya dosyalarını doğrudan sun
        # Eğer uygulamanızın medya dosyaları için 'media' klasörü varsa
        location /media/ {
            alias /usr/share/nginx/html/media/;
            expires 30d; # Tarayıcı önbelleğinde 30 gün tut
            add_header Cache-Control "public, no-transform";
            autoindex off;
        }

        # Hata sayfaları yapılandırması
        error_page 404 /404.html;
        location = /404.html {
            internal; # Sadece Nginx tarafından dahili olarak erişilebilir
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal; # Sadece Nginx tarafından dahili olarak erişilebilir
        }
    }
}
