# helm/myapp/values.yaml

# Genel Uygulama Ayarları
replicaCount: 1 # Varsayılan olarak tüm uygulamalar için tek replika
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "" # Eğer isim belirtilmezse Helm varsayılan bir isim oluşturur

podSecurityContext: {} # Pod düzeyinde güvenlik bağlamı (genellikle hassas ayarlar)
  # fsGroup: 2000 # Örnek: Pod'daki tüm container'lar için geçerli olacak dosya sistemi grubu ID'si

securityContext: {} # Container düzeyinde güvenlik bağlamı (genellikle hassas ayarlar)
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

---

# Frontend Ayarları
frontend:
  name: frontend
  replicaCount: 1 # Frontend için replika sayısı
  image:
    repository: meyfcsalik/frontend
    pullPolicy: IfNotPresent # İmaj daha önce çekilmemişse veya 'latest' ise çek
    tag: "" # CI/CD pipeline'ından --set ile override edilecek. Buraya varsayılan bir değer GİRMEYİN.
  service:
    type: NodePort # Dışarıdan erişim için NodePort kullanılıyor
    port: 80 # Service portu
    targetPort: 80 # Container'ın dinlediği port (sayısal)
    # Eğer uygulamanız HTTP portunu farklı bir isimle expose ediyorsa (örneğin 'http'),
    # 'targetPort: http' yapabilirsiniz, ancak 80 gibi sayısal değerler daha net ve sorunsuz olabilir.
    nodePort: 30081 # NodePort için kullanılacak port (30000-32767 aralığında olmalı)
  resources: {} # Kaynak limitleri ve istekleri (CPU/Bellek)
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 50m
    #   memory: 64Mi
  livenessProbe: # Uygulamanın canlı olup olmadığını kontrol eder
    httpGet:
      path: / # Frontend uygulamanızın sağlık kontrolü endpoint'i
      port: 80 # Container'ın HTTP dinlediği port
    initialDelaySeconds: 15
    periodSeconds: 20
    timeoutSeconds: 5 # Eklendi: Problar için timeout süresi
    failureThreshold: 3 # Eklendi: Kaç başarısız denemeden sonra pod'un restart edileceği
  readinessProbe: # Uygulamanın gelen isteklere hazır olup olmadığını kontrol eder
    httpGet:
      path: / # Frontend uygulamanızın sağlık kontrolü endpoint'i
      port: 80 # Container'ın HTTP dinlediği port
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5 # Eklendi: Problar için timeout süresi
    failureThreshold: 3 # Eklendi: Kaç başarısız denemeden sonra pod'un hazır olmadığı kabul edileceği
  podAnnotations: # Prometheus'un bu pod'dan metrikleri çekmesi için anotasyonlar
    prometheus.io/scrape: "true" # Prometheus'un bu pod'u taramasını sağlar
    prometheus.io/port: "80" # Frontend uygulamasının metrik sunduğu port (genellikle HTTP portu ile aynı olabilir, eğer /metrics oradan sunuluyorsa)
    prometheus.io/path: "/metrics" # Frontend uygulamasının metrik sunduğu yol.
                                  # Eğer frontend uygulamanızda Prometheus metrikleri yoksa, bu anotasyonları kaldırın veya ServiceMonitor'ı devre dışı bırakın.

---

# Backend Ayarları
backend:
  name: backend
  replicaCount: 1 # Backend için replika sayısı
  image:
    repository: meyfcsalik/backend
    pullPolicy: IfNotPresent
    tag: "" # CI/CD pipeline'ından --set ile override edilecek. Buraya varsayılan bir değer GİRMEYİN.
  service:
    type: ClusterIP # Küme içi erişim için ClusterIP
    port: 5000 # Service portu
    targetPort: 5000 # Container'ın dinlediği port (sayısal)
  env: # Backend için ortam değişkenleri
    # MongoDB bağlantı URL'i güncellendi:
    # Helm'de "fullname" helper'ı kullanılırsa, servis adı otomatik oluşturulur.
    # Servis adı genellikle <release-name>-<component-name> şeklinde olur.
    # Bu durumda "myapp-mongodb:27017" doğru olacaktır.
    MONGO_URL: "mongodb://{{ include \"myapp.fullname\" . }}-{{ .Values.mongodb.name }}:27017/myapp_default"
    NODE_ENV: "development" # Geliştirme ortamı modu
  resources: {}
    # limits:
    #   cpu: 200m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /api/health # Backend uygulamanızın sağlık kontrolü endpoint'i
      port: 5000 # Container'ın HTTP dinlediği port
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 5 # Eklendi
    failureThreshold: 3 # Eklendi
  readinessProbe:
    httpGet:
      path: /api/health # Backend uygulamanızın sağlık kontrolü endpoint'i
      port: 5000 # Container'ın HTTP dinlediği port
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5 # Eklendi
    failureThreshold: 3 # Eklendi
  podAnnotations: # Prometheus'un bu pod'dan metrikleri çekmesi için anotasyonlar
    prometheus.io/scrape: "true" # Prometheus'un bu pod'u taramasını sağlar
    prometheus.io/port: "5000" # Backend uygulamasının metrik sunduğu port
    prometheus.io/path: "/metrics" # Backend uygulamasının metrik sunduğu yol.
                                  # Backend uygulamanızın bu yolda metrikleri sunduğundan emin olun.

---

# MongoDB Ayarları
mongodb:
  name: mongodb
  replicaCount: 1 # MongoDB için tek replika (üretimde daha fazla olmalı)
  image:
    repository: mongo
    pullPolicy: IfNotPresent
    tag: "6.0" # MongoDB imaj versiyonu
  service:
    # StatefulSet kullanılıyorsa, headless service için serviceName alanı ile eşleşmeli.
    # Normal bir ClusterIP servisi için sadece 'name' yeterlidir.
    name: "{{ include \"myapp.fullname\" . }}-{{ .Values.mongodb.name }}" # Helm fullname helper kullanıldı
    type: ClusterIP # Genellikle küme içi erişim için ClusterIP
    # clusterIP: None # Eğer bu bir Headless Service ise (StatefulSet serviceName için) bu satırı etkinleştirin.
                      # Tek replikalı MongoDB için genellikle bu gerekli değildir.
    port: 27017 # MongoDB'nin varsayılan portu
  auth:
    enabled: true # MongoDB kimlik doğrulamasını etkinleştirin (Güvenlik için çok önemli!)
    # existingSecret: "" # Eğer önceden var olan bir secret kullanmak isterseniz adını buraya yazın
    # Yeni Secret oluşturulacaksa kullanılacak değerler (templates/secret-mongodb.yaml bunları kullanır)
    # rootPassword: "" # CI/CD secrets'tan gelmesi en iyisidir. `ansible-playbook` ile --set veya values.yaml'a gömülü olarak verilebilir.
    #                  # Eğer boş bırakılırsa ve templates/secret-mongodb.yaml rastgele oluşturuyorsa o şekilde kalabilir.
    usernameKey: "mongodb-root-username" # Secret içindeki kullanıcı adı key'i
    passwordKey: "mongodb-root-password" # Secret içindeki parola key'i
  
  # Persistence (Veri Kalıcılığı) Ayarları
  persistence:
    enabled: true # Verilerin kalıcı olması için PVC oluşturmayı etkinleştirir
    accessModes:
      - ReadWriteOnce
    size: 1Gi # PV boyutu
    storageClass: "" # Eğer belirli bir StorageClass kullanmıyorsanız boş bırakın veya cluster'ınızın varsayılanını kullanın
    # annotations: {}

  resources: {}
    # limits:
    #   memory: "512Mi"
    #   cpu: "500m"
    # requests:
    #   memory: "256Mi"
    #   cpu: "250m"

  # Problar (Sağlık Kontrolleri)
  livenessProbe:
    tcpSocket:
      port: 27017 # MongoDB'nin dinlediği port (sayısal)
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  readinessProbe:
    exec:
      command:
        - mongosh # mongo yerine mongosh kullanıldı (MongoDB 5.0+ için)
        - --eval
        - "db.adminCommand('ping')"
        - --quiet # Eklendi: çıktıyı susturur, sadece exit kodu önemli
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

---

# Ingress Ayarları
ingress:
  enabled: false # Eğer dışarıdan erişim için Ingress kullanılıyorsa 'true' yapılmalı

---

# Monitoring (kube-prometheus-stack) Ayarları
monitoring:
  enabled: true # Kube-Prometheus-Stack'i etkinleştirir. (Chart.yaml'deki 'condition' ile uyumlu)
  kube-prometheus-stack:
    # Kurulumun hangi namespace'e yapılacağı (varsayılan 'monitoring' tavsiye edilir)
    namespace: monitoring 
    
    # Grafana Ayarları
    grafana:
      enabled: true # Grafana'yı etkinleştirir
      service:
        type: NodePort # Grafana'ya dışarıdan erişim için NodePort
        port: 80 # Service portu
        nodePort: 30000 # Grafana için NodePort (30000-32767 aralığında olmalı)
      adminPassword: "" # **Çok Önemli:** Bu değer CI/CD secret'larınızdan (--set ile) GELMELİDİR!
                        # Örnek: `ansible-playbook ... --extra-vars "grafana_password=YOUR_SECRET_PASS"`
                        # ve Helm komutunuzda `--set grafana.adminPassword={{ grafana_password }}` gibi geçirin.
      # Otomatik Veri Kaynağı Yapılandırması: Prometheus'u Grafana'ya ekler
      # Bu kısım, prometheus-community/kube-prometheus-stack chart'ının kendi içindeki Grafana kurulumu için geçerlidir.
      defaultDashboards: true # Varsayılan Grafana dashboard'larını etkinleştir (Kubernetes ve Prometheus için)
      additionalDataSources:
        - name: Prometheus
          type: prometheus
          url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090 # Prometheus servisi URL'i
          # Bu URL, kube-prometheus-stack'in kurulu olduğu namespace'e (burada monitoring) ve release ismine göre değişir.
          # Varsayılan release adı 'kube-prometheus-stack' ise, bu URL doğru olacaktır.
          access: proxy
          isDefault: true
      # Özel Dashboard'lar eklemek için:
      # sidecar:
      #   dashboards:
      #     enabled: true
      #     label: grafana_dashboard
      # dashboardsConfigMaps:
      #   default:
      #     frontend-dashboard: |
      #       # Buraya frontend dashboard'unuzun JSON içeriği gelecek
      #     backend-dashboard: |
      #       # Buraya backend dashboard'unuzun JSON içeriği gelecek

    # Prometheus Ayarları
    prometheus:
      enabled: true # Prometheus'u etkinleştirir
      prometheusSpec:
        # ServiceMonitor/PodMonitor seçicileri:
        # Eğer bu değerler 'false' ise, Prometheus Operator Helm tarafından tanımlanan ServiceMonitor'ları
        # veya PodMonitor'ları dikkate alır. Uygulamanızın ServiceMonitor'larını kendi chart'ınıza
        # eklediğiniz için bu değerleri 'false' bırakmak genellikle doğrudur.
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        
        retention: "15d" # Metriklerin ne kadar süre saklanacağı
        # resources: {} # Prometheus pod'ları için kaynak limitleri
        #   limits:
        #     cpu: 500m
        #     memory: 1Gi
        #   requests:
        #     cpu: 250m
        #     memory: 512Mi